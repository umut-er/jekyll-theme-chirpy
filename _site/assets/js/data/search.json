[
  
  {
    "title": "My Contributions to the Newt Project",
    "url": "/posts/my-contributions-to-the-newt-project/",
    "categories": "",
    "tags": "gsoc",
    "date": "2024-07-01 17:10:00 +0300",
    





    
    "snippet": "IntroductionSo, I have been working on the Newt project (which is a project about what is usually called “systems biology”, especially visualizing biological pathways) for about three weeks (not co...",
    "content": "IntroductionSo, I have been working on the Newt project (which is a project about what is usually called “systems biology”, especially visualizing biological pathways) for about three weeks (not counting Eid). I will go through my contributions in chronological order below.Creating an SBML LegendA “legend” is defined as the wording on a map or diagram explaining the symbols used for those of you who are not familiar with that sense of the word. SBML stands for Systems Biology Markup Language which is linked with something called CellDesigner. None of these are terribly important for you to know fully. Here is a quick explanation:SBML is a way to define and show biochemical reactions with certain signs such that there is very little confusion about the meaning of the symbols. A legend is a document (briefly) explaining these symbols and their meanings. Here is the official CellDesigner legend:.I was tasked with making a similar legend and integrating it to the application. I came up with this:This was then integrated into the application. It now looks like this:                                                              Your browser does not support the video tag. Here is a    link to the video file instead.    Overall, I would say that this was a relatively simple although somewhat time consuming task since I had to create this image using inkscape, which was not something I was familiar with.Query HighlightingThere exists a database called PathwayCommons which contains a lot of biological pathways and interactions (mainly between genes). These database services have what’s called an API (stands for Application Programming Interface). What an API allows us to do is asking these services some data (in this case, it is giving us information about pathways). In Newt, there is an interface which allows us to make API requests (that is, asking a web service for some information) and display the result in a user friendly way. Here is a demonstratiton (warning: most of this video is the load screen, feel free to move to the 20s-25s mark):                                                              Your browser does not support the video tag. Here is a    link to the video file instead.    I was tasked with color coding this output so that it is more clear what is going on. I will skip over the details of how I did it (and causing a temporary crash on the internal server…) and just show you the result. Below is what comes out after the same query in the video:There are also more colorful queries, especially ones with both source and target nodes (understanding these terms are not relevant). Here is another picture (this one is a more complicated query between BRCA1 and BRCA2):Underlay HighlightingWell, in order to show the previous one, I had to show you this one as well, so, brief let me be. Newt originally had a highlight feature. It looked like this:After my implementations, it looks like this:This is a better highlighter for a couple of reasons:  It is visually more appealing and apparent.  It doesn’t interfere with situations where the color of the edges have significance.Map Type Display on TabsWe already talked about how we represent maps with symbols and legends. However, people have come up with different sets of symbols and legends over the years. Newt currently implements PD (process description), AF (activity flow), SIF (simple interaction format), SBML (systems biology markup language) and a combination of these. Every image that I can generate has uses at least one (possibly a combination of) the symbols of these dialects. This is called the “type” of the map. Previously, we could see the type of the map from the sidebar:After my visual changes, this is now how it looks (pay extra attention to the blue parts in the previous picture):As you can see, there is some visual change in the blue marked parts (marked in the previous picture). First of all, the map type is now shown on the tabs on the bottom right. Also, there is now a shadow effect on the tabs (in both blue marked places). This is technically called a box-shadow, which enhances the visuals.About a Bug I FoundA bug is defined as an error in a computer program or system. During my time working on the Newt project, I also found some issues with the works of other people working there. I don’t want to go into details, suffice it to say that there was some weird behavior with a pop-up panel. I pointed this out and also helped in implementing the ideal behavior for smoother user experience.Query Result SimplificationRemember this picture?Well, there is a problem. It’s big. It’s huge. It contains a lot of excess information. So, there was an idea on simplifying some of these extra bits of pieces. We do that by removing the nodes that we see as excess. We developed an algorithm (defined as a process or set of rules to be followed in calculations) on how to select what goes and what remains. The algorithm is a bit complicated to explain in this post, but ultimately not very complicated at all. What you should know is that the way we decide is not random. The things that go have to satisfy a certain level of simplicity (meaning that nothing complicated is lost). Without further yapping, let me present you with the simplified version of the same query:still complicated, but noticably simpler. Here is an extra picture on the nodes that we decide to delete with this algorithm (anything that is highlighted in blue means that it is going away):Closing RemarksHope this was a fun and easy read! I tried to make this piece as accessible as I can for the general public, which is not how I wrote the first two more technical posts. Anyhow, these document my changes (as of the date of publication) which is contained in the GitHub record in 7-8 issues and 2-3 pull requests. I think this was a productive couple of weeks for me, and my mentor seems to like my work as well. Currently I am reading about computer algebra, which is a computational/mathematical theory about making a computer solve mathematical problems (such as integration, think WolframAlpha if you are familiar with that). It’s a struggle… But maybe in the future (very future) a blog post about that may come out. Also, I included a Hamlet quotation in this post. Can you figure that out?"
  },
  
  {
    "title": "Running Newt on My Locale",
    "url": "/posts/running-newt-on-my-locale/",
    "categories": "",
    "tags": "gsoc",
    "date": "2024-06-03 17:00:00 +0300",
    





    
    "snippet": "IntroductionToday, I was able to get Newt working on my local computer, which is certainly an important step. I mentioned in my proposal that there were a lot of dependency conflicts between certai...",
    "content": "IntroductionToday, I was able to get Newt working on my local computer, which is certainly an important step. I mentioned in my proposal that there were a lot of dependency conflicts between certain parts of the project. Here, I go over more problems I encountered.Dependency ConflictsIn my proposal, I talked about the fact that most of the dependency conflicts were related to the forked cytoscape.js project, which I talked about in my first blog post. Quick reminder: The forked cytoscape.js project is below version 3.3.0, while certain extensions require a cytoscape.js that is above version 3.3.0. To understand the extent of the dependency conflict, I tried a temporary fix. I went to the cytoscape.js fork and, without altering anything else, changed its version number.This was not the only change I had to make though. I added the following:\"overrides\": {    \"graceful-fs\": \"^4.2.11\"  }to the package.json of sbgnviz.js. The reason is related to some conflict related to gulp. To go into more detail, please review this stackoverflow post. Also, I had to update the jquery versions in sbgnviz.js and chise.js from ^2.2.4 to ^3.3.1. After these dependency updates, I was able to run Newt on my local computer without any issues.This might not be an “honest” solution, because there was no merging changes from cytoscape.js 3.3.0. I am certainly planning to look at that as well now that I feel like I understand the project better. However, this shows that there are going to be no further issues related to dependency conflicts after these.sbgn.js (1)When I said “I was able to run Newt on my local computer without any issues,” I lied. There is one more, which is related to the sbgn.isActive() method I was talking about in my previous blog post. This method is nowhere to be found. Even when I ran the entire application (The stack looks something like cytoscape.js -&gt; sbgnviz.js -&gt; chise.js -&gt; Newt, however, the lower down projects are not necessarily independent of the projects utilizing them. For example, cytoscape.js cannot be used without sbgnviz.js), this method was not declared anywhere. I added a temporary fix, see below:// Temporary$$.sbgn.isActive = function (node) {    return false;}to sbgn-cy-renderer.js in sbgnviz.js, which seems to work just fine for now. Tracking this issue further, the active note stuff seems to be relatively recent. See the following git logs:commit 174418c24bec5e77d104e52352ee8fb39b2305c5 (origin/SBML)Author: Selbi Ereshova &lt;selbi.ereshova@ug.bilkent.edu.tr&gt;Date:   Wed Jul 27 15:06:43 2022 +0300    Added isActive backcommit 87a417d549e3b5b794ed0333e198b79a02525ab2Author: Selbi Ereshova &lt;selbi.ereshova@ug.bilkent.edu.tr&gt;Date:   Tue Jul 5 11:13:50 2022 +0300    Active node supportedcommit d3fbf19906020d497f230168714247ac9f3f497fAuthor: Selbi Ereshova &lt;selbi.ereshova@ug.bilkent.edu.tr&gt;Date:   Mon Jul 4 14:28:24 2022 +0300    Removed isActive check for nowcommit 4b82f842598dd3c55e6c142269a45f4f70e7b37eAuthor: Selbi Ereshova &lt;selbi.ereshova@ug.bilkent.edu.tr&gt;Date:   Thu Jun 30 18:15:21 2022 +0300    Recreated dist files        Recreated dist files after adding support for active node typecommit 8eb065dd892b9397f9970268d9f4cd3aa8ee3939Author: Selbi Ereshova &lt;selbi.ereshova@ug.bilkent.edu.tr&gt;Date:   Thu Jun 30 15:38:14 2022 +0300    documented new change        documented new change: \"active node support\"These commits are the ones just before I started working on this project (in terms of commits, not time). Inspecting the mail address, it seems that these commits are made by an undergraduate student, Selbi Ereshova, as part of another GSoC project. These were in 2022. I don’t know what happened to isActive() between then and now.sbgn.js (2)I mentioned in my previous post that I wanted to move sbgn implementations from sbgnviz.js to cytoscape.js. This turned out to be harder than expected. I think this is because of a cyclic dependency between node-shapes.js and sbgn.js. I have no idea how to solve this, or how moving these implementations to sbgnviz.js solves this issue. I have, in the commit history of my fork of cytoscape.js, a commit where I moved all the sbgn implementations. I am not able to use this as a normal cytoscape.js version, possibly because of the said cyclic dependency issue. This will be something I will be investigating in the future for sure.ConclusionI have detected some of the issues that were troubling me and found solutions to some of them. In the blog post I went over some of the things I am thinking about doing in the future. I am getting more familiar with the codebase, which is certainly going to be very helpful in the future."
  },
  
  {
    "title": "Initial Observations on Newt's Backend",
    "url": "/posts/initial-observations-on-newt's-backend/",
    "categories": "",
    "tags": "gsoc",
    "date": "2024-05-24 23:47:00 +0300",
    





    
    "snippet": "IntroductionAs a first step into my work, I am trying to understand how ivis-cytoscape and sbgnviz extend the functionality of the original cytoscape project. I will now try to explain what these e...",
    "content": "IntroductionAs a first step into my work, I am trying to understand how ivis-cytoscape and sbgnviz extend the functionality of the original cytoscape project. I will now try to explain what these extensions are, what they do and why they do what they do.Just a heads up, the information here might not be accurate / outdated. Please take a look at the documentation / the source code for yourself to confirm if anything looks wrong.MotivationCytoscape.js is a well rounded project for many use cases. Many companies / projects have been using this project for many reasons (you can see some of them here). However, if a project is good for a very broad scenarios, it is very often the case that for very specific scenarios it needs to be extended to fit particular needs. This is the case here. See the picture below:  This is taken from this page. These symbols are the ones used in SBGN Process Description notation. These would be what we want to use as nodes / edges in Newt. However, in order to use these, we need specialized ways to render these symbols and the interactions between objects of these types. This is the motivation of the extension of cytoscape.js.How It Is DoneIn this section I will explain how the original cytoscape.js got extended.What Can the Original Do?Let’s first of all note what cytoscape.js can do in order to talk about what it can’t do / how it is extended. By default, cytoscape.js seems to support a lot of shapes, here are some examples:  Polygon (more on this later!)  Ellipse  Round Rectangle  Cut Rectangle  Barrel  Bottom Round Rectangle  …See this for all possibilities. In the source code, these shapes are defined in the /src/core/extensions/renderer/base/node-shapes.js file. If we look carefully in the source code, we can see that there are only six “drawing strategies”, which are the ones listed above. The last five are pretty straight-forward, but there is more to Polygon than meets the eye. Below is a sample from the source code:BRp.generatePolygon = function( name, points ){  return ( this.nodeShapes[ name ] = {    renderer: this,    name: name,    points: points,    draw: function( context, centerX, centerY, width, height ){      this.renderer.nodeShapeImpl( 'polygon', context, centerX, centerY, width, height, this.points );    },    intersectLine: function( nodeX, nodeY, width, height, x, y, padding ){      return math.polygonIntersectLine(          x, y,          this.points,          nodeX,          nodeY,          width / 2, height / 2,          padding )        ;    },    checkPoint: function( x, y, padding, width, height, centerX, centerY ){      return math.pointInsidePolygon( x, y, this.points,        centerX, centerY, width, height, [0, -1], padding )      ;    }  } );};Polygon is defined as an array of points on the unit square (defined as \\([-1,1] \\times [-1,1]\\)) which are connected one by one (i.e. p1 connects to p2, p2 connects to p3…). All other shapes are defined using the Polygon drawing strategy (for example, the rhombus). As you can see in the source code, the generatePolygon() function returns an object which has a draw function which uses the ‘polygon’ drawing strategy. Keep this in mind for the following section.The Problem / The SolutionAn important (and limiting) feature of the polygon drawing strategy is that there is no way of defining arcs between points. The other drawing strategies are too specific to be used elsewhere, too. So, the problem is that there is no way we can get the shapes we want doing limited modifications / additions to the source code. A complicating factor is that many of these are compound shapes, meaning they contain more than one shape.The way that this issue got resolved is somewhat interesting. The first step is relatively straightforward. We register our new types (which are source and sink, nucleic acid feature, complex, macromolecule, simple chemical, biological activity and compartment) into the base cytoscape.js system. Then, we create wrapper functions called nodeFcnCaller.draw(), nodeFcnCaller.intersectLine() and nodeFcnCaller.checkPoint() (See the source code above, exactly the same three functions which are returned from this function!). We modify the source code such that any time we want to call the regular draw(), intersectLine() or checkPoint() methods, we call the wrapper instead. The wrapper functions check that whether these are sbgn shapes, and if they are, calls a different function (which takes in something called an imgObj, see cy-modifications.txt) to deal with that case.I then investigated where these shapes and their methods are defined. And I found … nothing. All clues pointed to src/sbgn.js, which was just an empty file with a comment:// sbgn shapes not supported by cytoscape.js this object will be exposed in cytoscape.js// and will be filled in sbgnviz.js// TODO: consider filling this object here and remove related things from sbgnvizUpon reading this, I investigated sbgnviz.js. From what I gathered, it seems to function as a frontend to this cytoscape.js fork, allowing it to work with higher level sbgn representations, such as sbgnml (stands for sbgn markup language).What is relevant to us, however, understanding that sbgnviz.js fills in these required functionalities (such as defining sbgn types). This is problematic for the following reasons. Without these functions, this cytoscape.js fork cannot function as a standalone project and always has to be used in conjunction with sbgnviz.js. Another issue is that it is impossible to test some features of the base project, which is what I encountered when I first ran the tests. For this reason, I agreed with the developer who wrote the TODO, and tried to actually do it. I found the required functions and their implementations in this file and moved them over to sbgn.js.Closing Remarks / Future WorkI would say that the small amount of work I did was relatively successful, and I felt like I learned a lot about the backend of the project. One thing that I am yet to figure out is something called sbgn.isActive(node), which is required in some places (see first code sample below), but is not actually in the sbgn-cy-renderer.js file. I added a temporary function with the same name that always returns false (until I figure out what it actually is), and I am happy to report that the fork actually passes all 514 tests! However, I don’t think there are specific tests for the sbgn features, which one might in the future look to add.~/projects/clones/cytoscape.js (unstable ✔) jsgrep \"isActive\"./src/collection/dimensions/bounds.js:469:      if(sbgn.isActive(ele)) {./src/sbgn.js:1370:sbgn.isActive = function(node) {Note: jsgrep is a alias around the grep command that I came up with to speed up my investigation of these huge repositories. It excludes ./dist, ./documentation and ./node_modules. If you are interested, add the snippet below to your terminal source file:# javascript project grep commandjsgrep(){\tgrep --color=auto -r -n $1 --exclude-dir=\"./node_modules\" --exclude-dir=\"./dist\" --exclude-dir=\"./documentation\" --exclude-dir={.bzr,CVS,.git,.hg,.svn,.idea,.tox}}"
  }
  
]

